INSTRUCTIONS:        
Given an array of integers, where all elements but one occur twice, find the unique element.

Example
The unique element is

.

Function Description

Complete the lonelyinteger function in the editor below.

lonelyinteger has the following parameter(s):

    int a[n]: an array of integers

Returns

    int: the element that occurs only once

Input Format

The first line contains a single integer,
, the number of integers in the array.
The second line contains space-separated integers that describe the values in

.

Constraints

It is guaranteed that
is an odd number and that there is one unique element.
, where .


SOLUTION:
    public static int lonelyinteger(List<int> a)
    {
        // If we sort the array then any number that does not repeat within one index is the lonely number
        // After the array has been sorted any pair's indices after the lonely number will odd then even
        // and any pair before the lonely number will be even then odd
        
        // we can do a binary search if we simple test if n+1 equals n
        // if not then it's either the lonely number or a pair after the lonely number
        // so we check the previous number and if it still doesn't match then is our lonely number
        
        // we'll simply do the classic binary min + max / 2 to get the time down to O(log n)
        
        // 10/10 bois
        
        a.Sort();
        
        foreach(int item in a)
        {
            Console.Write(item + " ");
        }
        
        int minIndex = 0;
        int maxIndex = a.Count - 1;
        
        while (maxIndex >= minIndex)
        {
            if (minIndex + maxIndex == 0)
            {
                return a[0];
            }
            
            int midIndex = (minIndex + maxIndex) / 2;
            
            if (midIndex % 2 != 0)
            {
                midIndex -= 1;
            }
            
            Console.WriteLine("min " + minIndex + " max " + maxIndex + " mid " + midIndex);
            
            // I'm pretty sure that C# rounds down integer division
            
            // Since we're incrementing/decrementing by two we need the mid index to be an even number
            // :/
            // 5 / 2 = 2
            // 15 / 2 = 7
            // 17 / 2 = 8
            // 25 / 2 = 12
            // 23 / 2 = 11
            // should it be pushed up or down?
            // if low is 22 and high is 28 that would be 48 / 2 = 24
            // hmmmm
            // we just need the first mid to be even then the rest will be even, right?
            
            if(midIndex + 1 < a.Count && a[midIndex] == a[midIndex + 1])
            { // pair is too low on the list
                minIndex = midIndex + 2; // Lets not test the same pair twice
            }
            else if (a[midIndex] == a[midIndex - 1])
            { // pair is higher then the lonely number
                maxIndex = midIndex - 2;
            }
            else
            {
                // index is the lonely number
                return a[midIndex];
            }
        }
        
        return 0; 
    }
        return 0; 
    
